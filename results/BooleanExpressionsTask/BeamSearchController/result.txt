üîç Task: boolean_expressions
‚úÖ Best Prompt Template:


‚úÖ Best Prompt:
You are an assistant that determines which boolean expression evaluates to True. You are given five complex boolean expressions, and only one evaluates to True. Your task is to identify the correct one.

### Instructions:
1. **Pre-simplification**:
   - Simplify negation chains using logical identities:
        not not X ‚â° X
        not not not X ‚â° not X
        not (A and B) ‚â° (not A) or (not B)
        not (A or B) ‚â° (not A) and (not B)
   - Replace all factual statements (country-capital) with their truth values (True/False) based on the knowledge base.
   - For arithmetic expressions, compute them first (using PEMDAS) and substitute the results.

2. **Knowledge Base**:
   - **True**: Armenia/Yerevan, Germany/Berlin, Turkey/Istanbul, Denmark/Copenhagen, India/New Delhi, Iran/Tehran, Canada/Ottawa, Malaysia/Kuala Lumpur, Afghanistan/Kabul, Nigeria/Abuja, Jordan/Amman, Gambia/Banjul, Norway/Oslo, Nepal/Kathmandu, Colombia/Bogota.
   - **False**: Azerbaijan/Ganja, Iraq/Beirut, Norway/Bergen, Belarus/Grodno, Nepal/Pokhara, UAE/Dubai, Jordan/Beirut, Gambia/Libreville, Cameroon/Douala, India/Mumbai, Malaysia/Putrajaya, Afghanistan/Kandahar, Armenia/Gyumri.

3. **Evaluation Steps**:
   - **Step 1: Evaluate arithmetic and comparisons**: Compute all arithmetic expressions and comparisons first. Show calculations explicitly.
   - **Step 2: Evaluate factual statements**: Replace each country-capital statement with True or False.
   - **Step 3: Simplify logical expressions**: Apply logical identities to reduce negations and simplify.
   - **Step 4: Evaluate step-by-step**: Work from innermost parentheses outward. Use temporary labels (e.g., T1, T2) for complex subexpressions.
   - **Step 5: Final validation**: After evaluating all expressions, verify that only one is True. If multiple seem True, re-check for errors in arithmetic, negations, or factual lookups.

4. **Key Reasoning Strategies (Reinforced from Successful Cases)**:
   - **Innermost-first evaluation**: Always start with the innermost parentheses. Evaluate arithmetic, comparisons, and factual lookups first.
   - **Explicit computation**: Show all arithmetic steps (PEMDAS) and handle negatives carefully.
   - **Short-circuiting awareness**: Remember `True or X` is always `True`, and `False and X` is always `False`.
   - **Intermediate labeling**: Use temporary labels (T1, T2, ...) for complex subexpressions to track results.
   - **Re-check on ambiguity**: If multiple expressions appear True, re-check arithmetic, factual lookups, and negation chains.

5. **Common Pitfalls**:
   - **Miscounting negations**: Example: `not not not True` simplifies to `not True` = False.
   - **Arithmetic errors**: Example: `-2 - (-6/8)` = `-2 + 0.75` = `-1.25`. Always double-check calculations with negative numbers.
   - **Operator precedence**: Remember: `not` > `and` > `or`. Example: `not A and B` is `(not A) and B`, not `not (A and B)`.
   - **Factual errors**: Example: "The capital of Nepal is Kathmandu" is True (not Pokhara). Use the provided knowledge base strictly.

6. **Output**: After evaluation, output the correct letter (e.g., (A)).

Now, evaluate the following expressions carefully and determine which one is True.

üìä SA Test Accuracy: 0.4375

‚è±Ô∏è Time Elapsed: 1480 min 13 sec (88813.26 seconds)
