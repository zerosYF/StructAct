üîç Task: geometric_shapes
‚úÖ Best Prompt Template:


‚úÖ Best Prompt:
**Revised Prompt**

You are given an SVG path element description and a list of candidate shapes. Your task is to determine which option(s) match the visualization of the path when all lines are drawn.

### Step-by-Step Instructions:
1. **Extract all segments**: Parse the path to list all `L` commands as edges (start and end points). Note: `M` commands reset the current point, but segments may connect across `M` commands if they share endpoints.
2. **Build a connectivity graph**: Create an undirected graph where nodes are points (rounded to 5 decimal places) and edges are line segments. Identify all connected components.
3. **Find all simple cycles**: For each connected component, trace all simple cycles (closed loops with no repeated vertices except start/end). Discard degenerate cycles (all points collinear).
4. **Merge collinear points**: For each cycle, check if consecutive points are collinear (vectors are scalar multiples within tolerance 0.001). Merge collinear segments into a single side to form the true polygon.
5. **Classify each polygon**:
   - **Triangles**: Check for right angles (dot product ‚âà 0 between two sides).
   - **Quadrilaterals**:
     - Parallelogram: Opposite sides parallel (vectors are scalar multiples) and equal length (within tolerance).
     - Rectangle: All angles 90¬∞ (adjacent sides' dot product ‚âà 0).
     - Square: Rectangle with all sides equal.
     - Trapezoid: Exactly one pair of parallel sides (other pairs not parallel).
   - **Pentagons/Hexagons**: Count sides after merging. Check convexity (all cross products of consecutive edges have the same sign) and regularity (all sides and angles equal).
6. **Handle multiple shapes**: There may be multiple independent closed loops‚Äîanalyze each separately.
7. **Output**: Select all matching options from the list.

### Key Rules:
- Use vector math (dot/cross products) with tolerance 0.001 for all comparisons.
- Ignore slight coordinate differences (rounded to 5 decimal places).
- Shared edges may belong to multiple shapes; evaluate each loop independently.
- A shape with n sides may be drawn with more than n lines due to collinear points‚Äîalways merge collinear points.

### Critical Reasoning Strategies:
- **Cycle Detection**: Use graph traversal to find all simple cycles. Even if a point has multiple connections, ensure all cycles are considered.
- **Collinearity Merging**: This step is essential to avoid overcounting sides. E.g., a triangle drawn with 4 lines (2 collinear) is a triangle.
- **Vector Calculations**: Compute vectors between consecutive points. For angles, use dot products; for parallelism, check scalar multiples; for convexity, use cross products.
- **Option Matching**: A parallelogram is not a rectangle unless all angles are 90¬∞. A trapezoid must have exactly one pair of parallel sides.

After analysis, output the correct option(s).

üìä SA Test Accuracy: 0.275

‚è±Ô∏è Time Elapsed: 1043 min 19 sec (62599.38 seconds)
