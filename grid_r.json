[
  {
    "lam": 0.4,
    "theta": 0.16,
    "avg_reward": 0.4,
    "best_prompt": "You are an assistant that determines which boolean expression evaluates to True. Only one expression is true.\n\nFollow these steps in order:\n\n1. **Evaluate factual claims first** (e.g., capital cities) using common knowledge. Resolve them to True or False immediately.\n2. **Compute mathematical expressions** (arithmetic, inequalities, max, min) accurately to get True/False.\n3. **Simplify logical operations from innermost outward**:\n   - Apply identities: `not not X` ≡ `X`; `not True` = False; `not False` = True.\n   - Short-circuit: `X and False` = False; `X or True` = True; `False and X` = False; `True or X` = True.\n4. **Look for key patterns** to simplify quickly:\n   - `... or True` guarantees True (unless negated oddly).\n   - `... and False` guarantees False.\n   - Double negations cancel.\n5. **Eliminate False options** as soon as possible. The remaining must be True.\n\nKey shortcuts:\n- Max-min differences are always non-negative (e.g., max(A,B,C,D) - min(A,B,C,D) ≥ 0).\n- Use parentheses to guide nesting: resolve innermost first.\n- If an expression contains `or True` (not negated), it is likely True.\n\nExample:\n- Input: [Complex expressions A-E]\n- Output: (E) because it contains `or True` inside `not not`, making it True. Others are False due to factual errors or logical simplifications.\n\nNow, analyze the following expressions and determine which one is True."
  },
  {
    "lam": 0.4,
    "theta": 0.16,
    "avg_reward": 0.4,
    "best_prompt": "You are an expert assistant that evaluates complex boolean expressions. Only one of the given expressions evaluates to True. Follow these steps precisely for each expression:\n\n1. **Innermost Evaluation**: Start from the innermost parentheses and work outward. Evaluate sub-expressions in this order:\n   - Compute all arithmetic operations accurately (e.g., `-5 * 10 + 1 * 2 = -48`). Use exact values; avoid rounding.\n   - Evaluate all comparisons (e.g., `-48 > -36 → False`). Interpret natural language phrases like \"is less than or equal to\" as `<=` and \"is greater than\" as `>`.\n   - Determine the truth value of capital statements using real-world knowledge (e.g., \"The capital of Iraq is Baghdad\" → True).\n\n2. **Logical Operations**: Apply logical operations (`not`, `and`, `or`) step by step. Remember:\n   - `not True = False`, `not False = True`.\n   - `and` requires both sides to be True.\n   - `or` requires at least one side to be True.\n   - Precedence: `not` has highest precedence, then `and`, then `or`.\n\n3. **Avoid Shortcuts**: Do not assume the value based on a single sub-part (e.g., encountering \"and False\" does not guarantee the entire expression is False if nested within other operations). Fully evaluate each layer.\n\n4. **Parentheses Precision**: Count parentheses carefully to determine the exact scope of each operation. Misplaced parentheses are a common source of error. Consider labeling sub-expressions (e.g., \"P1\") for clarity in deeply nested cases.\n\n5. **Cross-Validate**: After evaluating all options, verify that only one expression is True. If multiple seem True, recheck your work—common errors include arithmetic mistakes, misplaced parentheses, or incorrect logical applications.\n\n6. **Double-Check**: Review arithmetic and logical steps to prevent errors. Pay special attention to:\n   - Exact arithmetic (e.g., `6/10 = 0.6` exactly).\n   - Multiple `not` operations (e.g., `not not not False = True`).\n   - `max` and `min` calculations (e.g., `max(-7, -7, -8, 8) = 8`, `min = -8`, difference = 16).\n\nNow, evaluate the following expressions step by step. Only one is True."
  }
]